{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUserById","usersFromServer","find","userId","App","useState","setTitle","authorId","setAuthorId","preparedTodos","setPreparedTodos","isAuthorIdClicked","setIsAuthotIdClicked","isTitleClicked","setIsTitleClicked","action","method","onSubmit","event","preventDefault","prevTodos","newTodo","Math","max","type","placeholder","value","onChange","target","onBlur","htmlFor","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07df32bd.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user?: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    <UserInfo\n      user={todo.user}\n    />\n  </article>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo: Todo) => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (id: number) => {\n  return usersFromServer.find(user => user.id === id);\n};\n\nconst todos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [authorId, setAuthorId] = useState(0);\n  const [preparedTodos, setPreparedTodos] = useState(todos);\n  const [isAuthorIdClicked, setIsAuthotIdClicked] = useState(false);\n  const [isTitleClicked, setIsTitleClicked] = useState(false);\n\n  const getNextId = () => {\n    const maxId = Math.max(...preparedTodos.map(({ id }) => id));\n\n    return maxId + 1;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title || !authorId) {\n      setIsAuthotIdClicked(true);\n      setIsTitleClicked(true);\n\n      return;\n    }\n\n    setPreparedTodos(prevTodos => {\n      const newTodo = {\n        id: getNextId(),\n        title,\n        completed: false,\n        userId: authorId,\n        user: getUserById(authorId),\n      };\n\n      return [...prevTodos, newTodo];\n    });\n\n    setTitle('');\n    setAuthorId(0);\n    setIsAuthotIdClicked(false);\n    setIsTitleClicked(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            id=\"input\"\n            type=\"text\"\n            placeholder=\"Enter title of your post\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={event => setTitle(event.target.value)}\n            onBlur={() => setIsTitleClicked(true)}\n          />\n          {!title && isTitleClicked && (\n            <label\n              className=\"error\"\n              htmlFor=\"input\"\n            >\n              Please enter a title\n            </label>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            id=\"select\"\n            value={authorId}\n            onChange={event => setAuthorId(+event.target.value)}\n            onBlur={() => setIsAuthotIdClicked(true)}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {!authorId && isAuthorIdClicked && (\n            <label\n              className=\"error\"\n              htmlFor=\"select\"\n            >\n              Please choose a user\n            </label>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={preparedTodos}\n      />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}